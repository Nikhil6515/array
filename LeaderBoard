public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        int[] ranked = new int[m];
        for(int i=0; i<m; i++){
            ranked[i] = sc.nextInt();
        }        
        int n = sc.nextInt();
        int[] player = new int[n];
        for(int i=0; i<n; i++){
            player[i] = sc.nextInt();
        }
        int [] result = climbingLeaderBoard(ranked, player);
        //System.out.print(Arrays.toString(result));
        for(int i=0; i<result.length; i++){
            System.out.println(result[i]);
        }
    }
    static int[] climbingLeaderBoard(int[] ranked, int[] player){
        int m = ranked.length;
        int n = player.length;
        int[] rank = new int[m];
        int[] res = new int[n];
        rank[0] = 1;
        // maintaining an array to specify the ranks
        for(int i=1; i<m; i++){
            if(ranked[i]==ranked[i-1]){
                rank[i] = rank[i-1];
            }
            else{
                rank[i] = rank[i-1]+1;
            }
        }
        // using searching to find the rank acc. to new score
        for(int i=0; i<n; i++){
            int score = player[i];
            if(score>ranked[0]){
                res[i] = 1;
            }
            else if(score < ranked[m-1]){
                res[i] = rank[m-1]+1;
            }
            else{
                int index = binarySearch(ranked, score);
                res[i] = rank[index];
            }
        }
        return res;
    }
    public static int binarySearch(int[] arr, int key){
        int low=0;
        int high=arr.length-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(arr[mid] == key){
                return mid;
            }
            else if(arr[mid]<key && key<arr[mid-1]){
                return mid;
            }
            else if(arr[mid]>key && key>=arr[mid+1]){
                return mid+1;
            }
            else if(arr[mid]<key){
                high=mid-1;
            }
            else if(arr[mid]>key){
                low=mid+1;
            }
        }
        return -1;
    }
}
